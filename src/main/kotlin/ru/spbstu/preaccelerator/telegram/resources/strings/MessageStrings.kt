package ru.spbstu.preaccelerator.telegram.resources.strings

import dev.inmo.tgbotapi.extensions.utils.formatting.*
import ru.spbstu.preaccelerator.domain.entities.Protocol
import ru.spbstu.preaccelerator.domain.entities.Team
import ru.spbstu.preaccelerator.domain.entities.module.Module
import ru.spbstu.preaccelerator.domain.usecases.AddUsersUseCase
import ru.spbstu.preaccelerator.telegram.parsers.Xlsx

// TODO: –í—Å—ë –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
object MessageStrings {
    object Start {
        const val AskContact = "TODO"
        const val InvalidDeepLink = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞"
        const val NoRoleAssigned = "–¢–≤–æ–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å"
        const val WelcomeCurator = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∫—É—Ä–∞—Ç–æ—Ä."
        fun welcomeTracker(teams: List<Team>) = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —Ç—Ä–µ–∫–µ—Ä –∫–æ–º–∞–Ω–¥ ${teams.joinToString { it.name }}."
        fun welcomeMember(team: Team) = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã ${team.name}."
    }

    object Who {
        const val Empty = "–¢–≤–æ–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ"
        const val Curator = "–í—ã –∫—É—Ä–∞—Ç–æ—Ä"
        fun tracker(teams: List<Team>) = "–í—ã —Ç—Ä–µ–∫–µ—Ä –∫–æ–º–∞–Ω–¥ ${teams.joinToString { it.name }}"
        fun member(team: Team) = "–¢—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã ${team.name}"
    }

    object Cancel {
        const val Success = "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        const val NothingToCancel = "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å"
    }

    object Fallback {
        const val NoSuchCommand = "–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ–Ω–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        const val NotImplemented = "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"
    }

    object ChooseModuleAction {
        const val ChooseModuleAction = "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        const val ModuleLectures = "–õ–µ–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è\\. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –ª–µ–∫—Ü–∏—é"
        const val Err = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –º–µ–Ω—é"
    }

    object AddUsers {
        const val WaitDocument = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
        const val TemplateFilename = "–®–∞–±–ª–æ–Ω"
        const val InvalidFile = "–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è .xlsx —Ç–∞–±–ª–∏—Ü–µ–π"
        fun badFormat(errors: List<Xlsx.SheetErrors>) = errors.joinToString(separator = "\n") { tableErrors ->
            "–õ–∏—Å—Ç \"${tableErrors.name}\": –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ${
                if (tableErrors.rows.size == 1) "—Å—Ç—Ä–æ–∫–∏" else "—Å—Ç—Ä–æ–∫"
            } ${enumerationOfLimitedList(tableErrors.rows, 5)}"
        }

        fun result(result: AddUsersUseCase.Result) = buildString {
            if (result.notFoundTeams.isNotEmpty()) {
                appendLine(
                    "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ ${
                        if (result.notFoundTeams.size == 1) "–Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞" else "–Ω–∞–π–¥–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã"
                    } ${result.notFoundTeams.joinToString()}."
                )
            }
            appendLine(
                "–î–æ–±–∞–≤–ª–µ–Ω—ã ${result.membersCount} ${
                    pluralize(result.membersCount, "—É—á–∞—Å—Ç–Ω–∏–∫", "—É—á–∞—Å—Ç–Ω–∏–∫–∞", "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                } –∏ ${result.teamsCount} ${
                    pluralize(result.teamsCount, "–∫–æ–º–∞–Ω–¥–∞", "–∫–æ–º–∞–Ω–¥—ã", "–∫–æ–º–∞–Ω–¥")
                }"
            )
        }
    }

    object ReviewProtocols {
        const val Accepted = "‚úÖ"
        const val Declined = "‚ùå"

        const val SendComment = "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–∏—á–∏–Ω—É"
        const val SendCommentPlaceholder = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        const val NoUnreviewedProtocols = "üéâ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç!"

        fun protocol(protocol: Protocol?, team: Team, moduleNumber: Module.Number, status: String?, comment: String?) =
            buildEntities {
                if (status != null) {
                    regular(status)
                    regular(" ")
                }
                bold("–ú–æ–¥—É–ª—å ${moduleNumber.value + 1}")
                regular(" | ")
                bold("–ö–æ–º–∞–Ω–¥–∞: ")
                regularln(team.name)
                if (protocol != null) {
                    bold("–ü—Ä–æ—Ç–æ–∫–æ–ª: ")
                    linkln(protocol.url)
                } else {
                    regularln("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                }
                if (comment != null) {
                    bold("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ")
                    regularln(comment)
                }
            }
    }

    object Error {
        fun internal(message: String?) = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: $message"
    }

    object Curator {
        fun addCuratorDeepLink(deepLink: String) = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –±—É–¥—É—â–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É: $deepLink"
    }
}
